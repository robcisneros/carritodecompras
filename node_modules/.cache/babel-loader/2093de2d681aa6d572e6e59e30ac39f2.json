{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\INT1342\\\\Documents\\\\DesarrolloWeb\\\\curso-react\\\\react_5_mealsProject\\\\mealproject\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport CartContext from \"./cart-context\";\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.identifier === \"ADD_ITEM\") {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; // la const próxima existe solo si el item añadido ya se encuentra dentro de cartState\n    // si es que existe, regresa la posición en la que hizo match\n\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); // si el item es añadido por primera vez al carrito, existingCartItem es undefined\n    // si el item añado está más de una vez en el carrito, existingCartItem guarda ese item\n\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { // copia el item repetido en un new item llamado updatedItem\n        ...existingCartItem,\n        // en updated.amount se verá reflejado la cantidad ya actualizada\n        amount: existingCartItem.amount + action.item.amount\n      }; // copia el array de items \n\n      updatedItems = [...state.items]; // updatedItems reemplaza al elemento repetido con updatedItem(amount actualizado)\n\n      updatedItems[existingCartItemIndex] = updatedItem; // si no hay items repetidos, concatena los items de las acción ADD\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.identifier === \"REMOVE_ITEM\") {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingCartItem.price;\n    let updatedItems;\n\n    if (existingCartItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.identifier === \"CLEAR_CART\") {\n    return defaultCartState;\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      identifier: \"ADD_ITEM\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      identifier: \"REMOVE_ITEM\",\n      id: id\n    });\n  };\n\n  const clearCartHandler = () => {\n    dispatchCartAction({\n      identifier: \"CLEAR_CART\"\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n    clearCart: clearCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/INT1342/Documents/DesarrolloWeb/curso-react/react_5_mealsProject/mealproject/src/store/CartProvider.js"],"names":["CartContext","useReducer","defaultCartState","items","totalAmount","cartReducer","state","action","identifier","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","clearCartHandler","cartContext","addItem","removeItem","clearCart","children"],"mappings":"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","sourcesContent":["import CartContext from \"./cart-context\";\r\nimport { useReducer } from \"react\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\nconst cartReducer = (state, action) => {\r\n  if (action.identifier === \"ADD_ITEM\") {\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n\r\n    // la const próxima existe solo si el item añadido ya se encuentra dentro de cartState\r\n    // si es que existe, regresa la posición en la que hizo match\r\n    const existingCartItemIndex = state.items.findIndex( \r\n      (item) => item.id === action.item.id\r\n    );\r\n      // si el item es añadido por primera vez al carrito, existingCartItem es undefined\r\n      // si el item añado está más de una vez en el carrito, existingCartItem guarda ese item\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n\r\n    let updatedItems;\r\n    if (existingCartItem) {\r\n      const updatedItem = { \r\n        // copia el item repetido en un new item llamado updatedItem\r\n        ...existingCartItem,\r\n        // en updated.amount se verá reflejado la cantidad ya actualizada\r\n        amount: existingCartItem.amount + action.item.amount,\r\n      };\r\n      // copia el array de items \r\n      updatedItems = [...state.items];\r\n      // updatedItems reemplaza al elemento repetido con updatedItem(amount actualizado)\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n      // si no hay items repetidos, concatena los items de las acción ADD\r\n    } else {\r\n      updatedItems = state.items.concat(action.item);\r\n    }\r\n\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n  if (action.identifier === \"REMOVE_ITEM\") {\r\n\r\n    const existingCartItemIndex = state.items.findIndex( (item) => item.id === action.id);\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    const updatedTotalAmount = state.totalAmount - existingCartItem.price;\r\n    let updatedItems;\r\n    if (existingCartItem.amount === 1){\r\n      updatedItems = state.items.filter(item => item.id !== action.id);\r\n    }else {\r\n      const updatedItem = {...existingCartItem, amount:existingCartItem.amount -1};\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    }\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n  if (action.identifier === \"CLEAR_CART\") {\r\n    return defaultCartState;\r\n  }\r\n  \r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ identifier: \"ADD_ITEM\", item: item });\r\n  };\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ identifier: \"REMOVE_ITEM\", id: id });\r\n  };\r\n  const clearCartHandler = () => {\r\n    dispatchCartAction({ identifier: \"CLEAR_CART\" });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n    clearCart: clearCartHandler\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}